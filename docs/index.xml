<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ReadMe on Troubleshooting</title>
    <link>https://hello-world-example.github.io/Troubleshooting/</link>
    <description>Recent content in ReadMe on Troubleshooting</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Troubleshooting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/_sidebar/</guid>
      <description> Arthas  安装 命令列表 Advice 案例 常见问题   JDK 内建  🌈jcmd jps jstat jstack jmap jhat jinfo jstatd jsadebugd   Jsonde  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Advice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Advice/</guid>
      <description>Advice  https://github.com/alibaba/arthas/blob/master/core/src/main/java/com/taobao/arthas/core/advisor/Advice.java
 public class Advice { /** * 本次调用类所在的 ClassLoader */ ClassLoader loader; /** * 本次调用类的 Class 引用 */ Class&amp;lt;?&amp;gt; clazz; /** * 本次调用方法反射引用 */ ArthasMethod method; /** * ❤ 本次调用类的实例 ❤ */ Object target; /** * ❤ 本次调用参数列表，这是一个数组，如果方法是无参方法则为空数组 ❤ */ Object[] params; /** * ❤ 本次调用返回的对象，返回值 void，则值为 null ❤ */ Object returnObj; /** * ❤ 本次调用抛出的异常 ❤ */ Throwable throwExp; /** * 辅助判断标记 */ boolean isBefore; /** * 辅助判断标记 */ boolean isThrow; /** * 辅助判断标记 */ boolean isReturn; }  https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Case/</guid>
      <description>使用案例 诊断 Docker 里的 Java 进程 $ docker exec -it ${containerId} /bin/bash \  -c &amp;#34;wget https://alibaba.github.io/arthas/arthas-boot.jar &amp;amp;&amp;amp; java -jar arthas-boot.jar&amp;#34; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Commands/</guid>
      <description>命令列表  启动示例程序
​	wget https://alibaba.github.io/arthas/arthas-demo.jar ​	java -jar arthas-demo.jar
 查看帮助 $ help 查看支持的命令
NAME DESCRIPTION Base&amp;gt; help Display Arthas Help Base&amp;gt; version Display Arthas version Base&amp;gt; cls Clear the screen Base&amp;gt; history Display command history Base&amp;gt; keymap Display all the available keymap for the specified connection. Base&amp;gt; session Display current session information Base&amp;gt; pwd Return working directory name Base&amp;gt; cat Concatenate and print files Base&amp;gt; shutdown Shutdown Arthas server and exit the console Base&amp;gt; quit 退出 Base&amp;gt; grep 管道过滤 Sys&amp;gt; sysprop Display, and change the system properties.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/FAQ/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/FAQ/</guid>
      <description>常见问题 [ERROR] Target process 80696 is not the process using port 3658, you will connect to an unexpected process. [ERROR] 1. Try to restart arthas-boot, select process 62498, shutdown it first. [ERROR] 2. Or try to use different telnet port, for example: java -jar arthas-boot.jar --telnet-port 9998 --http-port -1 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Arthas/Install/</guid>
      <description>Install 安装 在 Github 上找到最新的发布包：https://github.com/alibaba/arthas/releases
$ wget https://github.com/alibaba/arthas/releases/download/arthas-all-3.1.1/arthas-3.1.1-bin.zip $ unzip arthas-3.1.1-bin.zip -d arthas $ cd arthas # 帮助 $ java -jar arthas-boot.jar -h 如何使用 # 进入交互页面 $ java -jar arthas-boot.jar [INFO] arthas-boot version: 3.1.1 [INFO] Process 62498 already using port 3658 [INFO] Process 62498 already using port 8563 [INFO] Found existing java process, please choose one and hit RETURN. * [1]: 62498 xxx Java 进程 xxx [2]: 54006 xxx Java 进程 xxx [3]: 53993 xxx Java 进程 xxx &amp;gt; 选择一个 Java 进程ID，进入交互页面 [INFO] arthas home: /opt/websuite/arthas [INFO] The target process already listen port 3658, skip attach.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jcmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jcmd/</guid>
      <description>jcmd jcmd 是 JDK 7 之后推出的一个多功能工具，拥有 jmap 的大部分功能。
列出 Java 进程 直接执行 jcmd 即可列出java进行，效果与 jcmd -l 、 jps -ml 的效果是一样的
打印出 java 进行支持的命令 jcmd 0 help ： 打印出所有java进程支持的命令 jcmd &amp;lt;pid&amp;gt; help ： 打印出执行中java进程支持的命令
以下是在我的机器上执行的结果，结果打印出了 43976 Java 进程可用的命令。
$ jcmd 43976 help 43976: The following commands are available: VM.native_memory VM.commercial_features ManagementAgent.stop ManagementAgent.start_local ManagementAgent.start Thread.print GC.class_histogram GC.heap_dump GC.run_finalization GC.run VM.uptime VM.flags VM.system_properties VM.command_line VM.version help For more information about a specific command use &amp;#39;help &amp;lt;command&amp;gt;&amp;#39;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jhat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jhat/</guid>
      <description>jhat jhat` 可以对 dump 出来的堆信息进行处理，以 html 页面的形式展示出来。
执行 jhat /tmp/123.hprof即可，默认端口是 7000，访问 http://localhost:7000 即可查看结果。
通过 -port 指定端口。
有时候文件过大的时候可能会出错，可以通过-J-Xmx1024m修改JVM最大可用内存。
其他参数详请查看官方文档。
Read More  jhat官方文档
jhat中的OQL（对象查询语言
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jinfo/</guid>
      <description>jinfo jinfo 可以打印或者修改 Java进程 的配置信息。配置信息包括 Java 系统属性 和 JVM flags（ Java system properties and Java Virtual Machine (JVM) command-line flags）。
查看帮助 jinfo、jinfo -h、jinfo -help 三种方法都可以打印出帮助信息。
$ jinfo Usage: jinfo [option] &amp;lt;pid&amp;gt; (to connect to running process) jinfo [option] &amp;lt;executable &amp;lt;core&amp;gt; (to connect to a core file) jinfo [option] [server_id@]&amp;lt;remote server IP or hostname&amp;gt; (to connect to remote debug server) where &amp;lt;option&amp;gt; is one of: -flag &amp;lt;name&amp;gt; to print the value of the named VM flag -flag [+|-]&amp;lt;name&amp;gt; to enable or disable the named VM flag -flag &amp;lt;name&amp;gt;=&amp;lt;value&amp;gt; to set the named VM flag to the given value -flags to print VM flags -sysprops to print Java system properties &amp;lt;no option&amp;gt; to print both of the above -h | -help to print this help message 系统配置 jinfo &amp;lt;pid&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jmap/</guid>
      <description>jmap jmap 可以输出 Java 进程 内存中对象的工具，64位机上使用需要加上-J-d64参数。jmap 一般和 jhat 或者 MAT 配合使用，以图像的形式直观的展示当前内存是否有问题。
参数说明 -dump:[live,]format=b,file=&amp;lt;filename&amp;gt; 以hprof二进制格式转储Java堆到指定filename的文件中。 live子选项是可选的，如果指定了live子选项，堆中只有活动的对象会被转储。 想要浏览heap dump，你可以使用 jhat(Java堆分析工具) 或者 MAT 读取生成的文件。 -finalizerinfo 打印等待终结的对象信息。 -heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。 -histo[:live] 打印每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。 打印的虚拟机内部的类名称将会带有一个&amp;#39;*&amp;#39;前缀。 如果指定了live子选项，则只计算活动的对象。 -permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。 对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。 此外，包含的字符串数量和大小也会被打印。 -F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。 -h | -help 打印帮助信息。 -J&amp;lt;flag&amp;gt; 指定传递给运行jmap的JVM的参数。 例子 jmap -histo &amp;lt;pid&amp;gt;
打印每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。
$ jmap -histo 56227 num #instances #bytes class name ---------------------------------------------- 1: 32283 4509704 &amp;lt;constMethodKlass&amp;gt; 2: 32283 4139728 &amp;lt;methodKlass&amp;gt; 3: 631 3899688 [I 4: 3346 3563648 &amp;lt;constantPoolKlass&amp;gt; 5: 11058 2885584 [B 6: 3346 2262360 &amp;lt;instanceKlassKlass&amp;gt; 7: 2569 1892992 &amp;lt;constantPoolCacheKlass&amp;gt; 8: 13562 1296680 [C 9: 3554 333488 java.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jmc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jmc/</guid>
      <description>jmc (Java Mission Control) 是一个集成的图形化界面管理工具，监控功能十分强大，下面是官方文档，这里暂不做过多介绍。
Java Mission Control User&amp;rsquo;s Guide
Java Flight Recorder Runtime Guide</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jps/</guid>
      <description>jps jps 可以列出当前系统的Java进程
语法 jps [ options ] [ hostid ]
jps [-q] [-mlvV] [&amp;lt;hostid&amp;gt;]
options -l 显示main方法包名 或者 应用jar包的全路径 -m 显示main方法参数 -v 显示JVM参数 -help 帮助信息 -q 只列出进程ID -V 通过 flags 文件传递给JVM的参数 (the .hotspotrc file or the file specified by the -XX:Flags=&amp;lt;filename&amp;gt; argument) -J 给jps命令传递JVM参数，例如：jps -J-Xms2m 分配了 2M 起始内存 hostid 如果监控本地 JVM进程的话就是 进程ID； 如果进行远程监控，详请查看 jstatd 部分例子
官方文档  jps - Java Virtual Machine Process Status Tool JDK7/JDK8
 JDK7 和 JDK8 对 jps 的解释还是稍有不同的。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jsadebugd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jsadebugd/</guid>
      <description>jsadebugd jsadebugd依附到一个Java进程，开启一个rmi服务，担当一个调试服务器的作用，可供 jinfo、jmap、jstack 命令拉取远程机器上的信息。
开启服务 $ jsadebugd &amp;lt;pid&amp;gt; Attaching to process ID &amp;lt;pid&amp;gt; and starting RMI services, please wait... Debugger attached and RMI services started. 开启之后可以通过 Ctrl + C 关闭停止
远程连接 $ jinfo localhost Attaching to remote server localhost, please wait... Debugger attached successfully. Server compiler detected. JVM version is 24.75-b04 Java System Properties: idea.version = =2016.3.3 java.runtime.name = Java(TM) SE Runtime Environment java.vm.version = 24.75-b04 ...... jmap、jstack 类似。
参考  jsadebugd官方文档</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jstack/</guid>
      <description>jstack jstack 可以打印出 线程的状态、调用栈、锁资源 等信息。 可以用于分析死锁、性能瓶颈等问题。用法相对简单但非常有用。
参数 -F 当 jstack [-l] &amp;lt;pid&amp;gt; 无相应的时候可以使用该参数强制dump -l 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表 -m 打印 java 和 native 代码的所有栈信息 -h|-help 打印帮助信息 Read More   jstack 官方文档
  JAVA线程dump的分析 &amp;mdash; jstack pid
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jstat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jstat/</guid>
      <description>jstat jstat 统计 JVM 信息，打印 GC 信息
options -help 显示帮助信息 -options 支持的统计项 这里使用-options 输出如下：
$ jstat -options -class -compiler -gc -gccapacity -gccause -gcnew -gcnewcapacity -gcold -gcoldcapacity -gcpermcapacity -gcutil -printcompilation options 含义    参数 含义     gc 用于查看JVM中堆的垃圾收集情况的统计   gcutil 用于查看新生代、老生代及持代垃圾收集的情况   class 用于查看类加载情况的统计   compiler 用于查看HotSpot中即时编译器编译情况的统计   gccapacity 用于查看新生代、老生代及持久代的存储容量情况   gccause 用于查看垃圾收集的统计情况（这个和-gcutil选项一样），如果有发生垃圾收集，它还会显示最后一次及当前正在发生垃圾收集的原因。   gcnew 用于查看新生代垃圾收集的情况   gcnewcapacity 用于查看新生代的存储容量情况   gcold 用于查看老生代及持久代发生GC的情况   gcoldcapacity 用于查看老生代的容量   gcpermcapacity 用于查看持久代的容量   printcompilation HotSpot编译方法的统计    参数 格式 ： jstat -&amp;lt;option&amp;gt; [-t] [-h&amp;lt;lines&amp;gt;] &amp;lt;vmid&amp;gt; [&amp;lt;interval&amp;gt; [&amp;lt;count&amp;gt;]]</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Troubleshooting/docs/Java/jstatd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Troubleshooting/docs/Java/jstatd/</guid>
      <description>jstatd jstatd 会开启一个 RMI 服务，供其他机器进行远程监控
参数 -nr 如果RMI注册中心没有找到，不会创建一个内部的RMI注册中心 -p RMI端口，默认为1099 -n RMI名称， 默认是 JStatRemoteHost -J 传递JVM参数 例子 新建文件 jstatd.all.policy内容如下，给jstatd授予所有权限
grant codebase &amp;quot;file:${java.home}/../lib/tools.jar&amp;quot; { permission java.security.AllPermission; }; 开启 jstatd 守护进程，开启后会有一个光标一直在闪，Ctrl + C 退出
jstatd -J-Djava.security.policy=jstatd.all.policy 绑定端口和设置名称
jstatd -J-Djava.security.policy=jstatd.all.policy -p 6789 -n rmiJstatsName 使用 jps 远程监控 假设 jstatd 的所在机器是 192.168.4.35
jps rmi://192.168.4.35:6789/rmiJstatsName 输出结果
11452 RemoteMavenServer 4440 Jstatd 10016 Launcher  使用 jstat 远程监控
jstat -gcutil 11452@192.168.4.35:6789/rmiJstatsName 500 10 打开日志输出
jstatd -J-Djava.security.policy=jstatd.all.policy -J-Djava.rmi.server.logCalls=true Read More  官网 jstatd jstatd 命令(Java Statistics Monitoring Daemon)  Default Policy Implementation and Policy File Syntax  </description>
    </item>
    
  </channel>
</rss>